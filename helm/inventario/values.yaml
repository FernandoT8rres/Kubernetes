# Configuración global para todos los servicios
global:
  environment: production
  imageRegistry: ${ECR_REPOSITORY_URL}

# Configuración de Ingress
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1

# Configuración de Auto-escalamiento
autoscaling:
  enabled: true
  frontend:
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  backend:
    minReplicas: 3
    maxReplicas: 6
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Configuración para namespace
namespace:
  name: inventario-system
  labels:
    name: inventario-system
    app: inventario

# Configuración para frontend
frontend:
  name: frontend
  image:
    repository: ${ECR_REPOSITORY_URL}/inventario-frontend
    tag: latest
    pullPolicy: Always
  replicas: 2
  service:
    type: LoadBalancer
    port: 80
    targetPort: 80
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  probes:
    liveness:
      path: /login.html
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
    readiness:
      path: /login.html
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5

# Configuración para backend
backend:
  name: backend
  image:
    repository: ${ECR_REPOSITORY_URL}/inventario-backend
    tag: latest
    pullPolicy: Always
  replicas: 3
  service:
    port: 9000
    targetPort: 9000
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  probes:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
    readiness:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
  config:
    DB_HOST: "mysql-service"
    DB_NAME: "sci_db"
    DB_USER: "inventario_user"

# Configuración para la base de datos
database:
  name: mysql
  image:
    repository: ${ECR_REPOSITORY_URL}/inventario-mysql
    tag: latest
    pullPolicy: Always
  service:
    port: 3306
    targetPort: 3306
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  probes:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
    readiness:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
  persistence:
    storageClass: manual
    size: 5Gi
    mountPath: /var/lib/mysql
    hostPath: /mnt/data/mysql
  config:
    characterSetServer: utf8mb4
    collationServer: utf8mb4_unicode_ci
    authenticationPlugin: mysql_native_password
    characterSetClient: utf8mb4
  secrets:
    rootPassword: "MTIzNDU2Nzg="
    database: "c2NpX2Ri"
    user: "aW52ZW50YXJpb191c2Vy"
    password: "aW52ZW50YXJpb19wYXNzd29yZA=="

# Configuración de monitoreo
monitoring:
  prometheus:
    name: prometheus
    image:
      repository: prom/prometheus
      tag: v2.40.0
      pullPolicy: Always
    service:
      type: ClusterIP
      port: 9090
      targetPort: 9090
    resources:
      requests:
        memory: "256Mi"
        cpu: "200m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    persistence:
      enabled: true
      size: 10Gi
  grafana:
    name: grafana
    image:
      repository: grafana/grafana
      tag: 9.3.6
      pullPolicy: Always
    service:
      type: ClusterIP
      port: 3000
      targetPort: 3000
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"
    persistence:
      enabled: true
      size: 5Gi
    admin:
      user: admin
      passwordSecret: grafana-admin-password
      passwordKey: admin-password
